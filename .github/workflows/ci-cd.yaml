name: CI/CD Nuxt 4

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: nuxt4-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE: nassabiq/gpci-compro
  IMAGE_LATEST: ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
  IMAGE_SHA: ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ github.sha }}
  SERVER_PATH: ~/apps/gpci-compro

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_LATEST }}
            ${{ env.IMAGE_SHA }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE }}:buildcache,mode=max

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (ambil compose dari repo)
        uses: actions/checkout@v4

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/docker-compose.yml"
          target: "${{ env.SERVER_PATH }}"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail

            mkdir -p "${SERVER_PATH}"
            cd "${SERVER_PATH}"

            # Pastikan .env sudah ada di server (dibuat manual sekali)
            if [ ! -f .env ]; then
              echo "ERROR: ${SERVER_PATH}/.env belum ada. Buat dulu di server." >&2
              exit 1
            fi

            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker pull "${IMAGE_LATEST}"
            docker compose pull
            docker compose up -d

            # optional housekeeping
            docker image prune -af --filter "until=24h"
